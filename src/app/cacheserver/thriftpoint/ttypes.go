// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftpoint

import (
	"fmt"
	"math"
	"thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type TCacheRequest struct {
	GroupName string `thrift:"groupName,1"`
	Key       string `thrift:"key,2"`
	Trace     bool   `thrift:"trace,3"`
	NotLoad   bool   `thrift:"notLoad,4"`
	Timeout   int32  `thrift:"Timeout,5"`
}

func NewTCacheRequest() *TCacheRequest {
	return &TCacheRequest{}
}

func (p *TCacheRequest) IsSetTrace() bool {
	return p.Trace != false
}

func (p *TCacheRequest) IsSetNotLoad() bool {
	return p.NotLoad != false
}

func (p *TCacheRequest) IsSetTimeout() bool {
	return p.Timeout != 0
}

func (p *TCacheRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TCacheRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *TCacheRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *TCacheRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Trace = v
	}
	return nil
}

func (p *TCacheRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NotLoad = v
	}
	return nil
}

func (p *TCacheRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Timeout = v
	}
	return nil
}

func (p *TCacheRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCacheRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TCacheRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return fmt.Errorf("%T.groupName (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupName: %s", p, err)
	}
	return err
}

func (p *TCacheRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *TCacheRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrace() {
		if err := oprot.WriteFieldBegin("trace", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:trace: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Trace)); err != nil {
			return fmt.Errorf("%T.trace (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:trace: %s", p, err)
		}
	}
	return err
}

func (p *TCacheRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotLoad() {
		if err := oprot.WriteFieldBegin("notLoad", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:notLoad: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NotLoad)); err != nil {
			return fmt.Errorf("%T.notLoad (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:notLoad: %s", p, err)
		}
	}
	return err
}

func (p *TCacheRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err := oprot.WriteFieldBegin("Timeout", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:Timeout: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Timeout)); err != nil {
			return fmt.Errorf("%T.Timeout (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:Timeout: %s", p, err)
		}
	}
	return err
}

func (p *TCacheRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCacheRequest(%+v)", *p)
}

type TCacheResult struct {
	Done    bool     `thrift:"done,1"`
	Value   []byte   `thrift:"value,2"`
	Length  int32    `thrift:"length,3"`
	ErrorA1 string   `thrift:"error,4"`
	Traces  []string `thrift:"traces,5"`
}

func NewTCacheResult() *TCacheResult {
	return &TCacheResult{}
}

func (p *TCacheResult) IsSetErrorA1() bool {
	return p.ErrorA1 != ""
}

func (p *TCacheResult) IsSetTraces() bool {
	return p.Traces != nil && len(p.Traces) > 0
}

func (p *TCacheResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TCacheResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *TCacheResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *TCacheResult) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Length = v
	}
	return nil
}

func (p *TCacheResult) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *TCacheResult) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Traces = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Traces = append(p.Traces, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TCacheResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCacheResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TCacheResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:done: %s", p, err)
	}
	return err
}

func (p *TCacheResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if err := oprot.WriteFieldBegin("value", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:value: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return fmt.Errorf("%T.value (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:value: %s", p, err)
		}
	}
	return err
}

func (p *TCacheResult) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:length: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Length)); err != nil {
		return fmt.Errorf("%T.length (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:length: %s", p, err)
	}
	return err
}

func (p *TCacheResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorA1() {
		if err := oprot.WriteFieldBegin("error", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:error: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
			return fmt.Errorf("%T.error (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:error: %s", p, err)
		}
	}
	return err
}

func (p *TCacheResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Traces != nil {
		if p.IsSetTraces() {
			if err := oprot.WriteFieldBegin("traces", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:traces: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Traces)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Traces {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:traces: %s", p, err)
			}
		}
	}
	return err
}

func (p *TCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCacheResult(%+v)", *p)
}
