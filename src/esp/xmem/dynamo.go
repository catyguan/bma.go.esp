package xmem

// http://baike.baidu.com/subview/2982765/10950438.htm
/*
数据同步
Dynamo的一个node中的同步是由client端来“解决”的，使用所谓的（N, R, W）模型，
其中，N表示node中机器的总数，R表示一个读请求需要的机器参与总数，W代表一个写请求需要的机器参与总数，
这些值由client端配置。

例如，一个node有5台机器（N=5），client发出写请求——广播到5台机，如果收到3个“写完成”的返回消息，即认为写成功（W=3）；
client发出读请求——还是广播到5台机，如果收到2个“读完成”的返回消息，即认为读成功（R=2）。
对于数据十分重要的应用（如金融），配置可以为(5, 5, 5)，即要求node中所有机器的写都成功；
而对于数据读写访问量极高的应用，配置可以为（5, 1, 1）。

通常W不等于N，于是，在某些情况下一个node内的机器上的数据可能会有不一致，
这时Dynamo是通过将多个Read的返回结果“合并”来得出最终结果的，使用了所谓Object Version和Vector clock的技术，
即跟踪一个Object在不同机器上的版本变化，以确保当多个Read请求结果返回不一致时，能够根据其版本信息得出正确的结果。
Dynamo的这种做法是一种折衷，即为了同时保证读和写的效率，写操作不要求绝对同步，而把不同步可能产生的后果推给了读操作。

数据恢复
Dynamo的一个node中一台机器建有一个Merkle Tree，当两台机器不一致时（如一台机器宕机一段时间），
通过这个tree结构，可以快速定位不一致的Object来恢复数据。Merkle Tree又叫Hash Tree，它把key分成几个range，
每个range算出一个hash值，作为叶子，再一层层合并计算上去，这样，从root开始比较hash值，就可以快速找到哪几段range中的hash值变化了。
*/
